      <div class="basket-product">
        <div class="item">

          <div class="product-image">
            <img src="http://placehold.it/120x166" alt="Placholder Image 2" class="product-frame">
          </div>

          <div class="product-details">
            <h1><strong><span class="item-quantity">4</span> x Eliza J</strong> Lace Sleeve Cuff Dress</h1>
            <p><strong>Navy, Size 18</strong></p>
            <p>Product Code - 232321939</p>
          </div>
        </div>

        <div class="price">26.00</div>

        <div class="quantity">
          <input type="number" value="4" min="1" class="quantity-field">
        </div>

        <div class="subtotal">104.00</div>
        
        <div class="remove">
          <button>Remove</button>
        </div>
      </div>
    
            <input data-product_id="{{ order_item.product_id }}" 
              id="id_qty_{{ order_item.product_id }}"
              type="number" id="adjust_cart_qty_{{ order_item.product_id }}"
              value="{{ order_item.quantity }}" min="1" max="90"
              class="quantity-field qty_input">


	{% if messages %}  
    <div class="container-messages">
      {% for message in messages %}
        <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
          {{ message }}
          <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        {% endfor %}
    </div>
  {% endif %}

from django.db import models
from products.models import Product
from checkout.models import Order


# MODEL FOR THE OBJECT ITEM
class OrderItem(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.IntegerField(null=false, blank=false, default=0)
    orderitem_total = models.DecimalField(max_digits=6, null=False, default=True, decimal_places=2)

    def save(self, *args, **kwargs):
        # OVERRIDE ORIGINAL SAVE METHOD && SET THE ORDERITEM TOTAL
        # && UPDATE THE ORDER TOTAL
        self.orderitem_total = self.product.price * self.quantity
        super().save(*args, **kwargs)

    def __str__(self):
        return f'ID {self.product.id} on order {self.order.order_id}'
